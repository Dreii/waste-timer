{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["socketUrl","concat","window","location","hostname","App","state","callbacks","err","socket","loading","loadingButton","addingDone","_this2","this","io","on","setState","console","log","setTimeout","_this3","mins","hr","Math","floor","minDisplay","react_default","a","createElement","className","react_loading_default","type","color","height","width","onClick","emit","disabled","index_es","icon","faCheck","faPlus","Component","Boolean","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8bca36d6.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPlus } from '@fortawesome/free-solid-svg-icons'\nimport { faCheck } from '@fortawesome/free-solid-svg-icons'\nimport ReactLoading from 'react-loading'\n\nimport io from 'socket.io-client'\nconst socketUrl = `http://${window.location.hostname}:3231`\n// let baseUrl = ''\n\nclass App extends Component {\n  state = {\n    callbacks: 0,\n    err: '',\n    socket: null,\n    loading: true,\n    loadingButton: false,\n    addingDone: false\n  }\n\n  componentDidMount(){\n    const socket = io(socketUrl)\n    socket.on('connect', ()=>{\n      this.setState({socket})\n\n      socket.on('CALLBACK_UPDATE', callbacks => {\n        console.log(callbacks)\n        this.setState({callbacks, loading: false, loadingButton: false})\n        setTimeout(()=>this.setState({addingDone: false}), 600)\n      })\n\n      socket.on('error', (err)=>{\n        this.setState({err})\n      })\n    })\n  }\n\n  render() {\n    let callbacks = this.state.callbacks\n    let mins = callbacks * 8\n    let hr = Math.floor(mins / 60)\n    let minDisplay = mins-hr*60\n    return (\n      <div className=\"App\">\n\n        {this.state.loading ? (\n          <div className=\"container\">\n            <ReactLoading className=\"main-loading\" type=\"spin\" color=\"white\" height={'32px'} width={'32px'} />\n          </div>\n        ):(\n          <div className=\"container\">\n            {/* total calls * 10 / 60 */}\n            <p className=\"title\">We've wasted,</p>\n\n            <div className=\"time-display\">\n              <div className=\"time-inner\">\n                <p className=\"hr-display\">{hr}</p>\n                <div className=\"time-sub\">\n                  <p className=\"hr-subtitle\">Hours</p>\n                  {/* <br/> */}\n                  <p className=\"min-display\">{minDisplay}</p>\n                  {/* - (callbacks * 8 % 60) */}\n                  <p className=\"min-subtitle\">Minutes</p>\n                </div>\n              </div>\n            </div>\n\n\n            <p className=\"or\">or</p>\n\n            <div className=\"cash-container\">\n              {/* total calls * 10 / 60 * 90 */}\n              <p className=\"cash-display\">${callbacks * 10 * 1.50}</p>\n              <p className=\"callback-number-subtitle\">On {callbacks} callbacks.</p>\n              <p className=\"days-display\">In the past 5 days.</p>\n              <p className=\"comment-subtitle\">\n                {callbacks > 10 ? `We should probably work on that.` : 'Thats not too bad.'}\n              </p>\n            </div>\n\n            <button\n              className={`addCallbackButton ${this.state.loadingButton ? \"disabled\": \"\"}`}\n              onClick={()=>{\n                if(this.state.socket) this.state.socket.emit('NEW_CALLBACK', \"null\")\n                this.setState({loadingButton: true, addingDone: true})\n              }}\n              disabled = {this.state.loadingButton|| this.state.addingDone ? true : false}\n            >\n              {this.state.loadingButton ? (\n                <div className=\"button-icon\">\n                    <ReactLoading className=\"button-loading fade-in\" type=\"spin\" color=\"white\" height={'32px'} width={'32px'} />\n                </div>\n              ):(\n                <div>\n                  {this.state.addingDone ? (\n                    <div className=\"button-icon fade-in check\">\n                      <FontAwesomeIcon icon={faCheck} />\n                    </div>\n                  ):(\n                    <div className=\"button-icon fade-in add\">\n                      <FontAwesomeIcon icon={faPlus} />\n                      <br/>\n                      <p className=\"button-subtitle\">Add Callback</p>\n                    </div>\n                  )}\n                </div>\n              )}\n            </button>\n\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}